/* Assignment -> Implement Kruskal's Algorithm using self-made Priority Queue 
and Union find or Disjoint set Union Algorithm to detect cycle. */

#include <iostream>
#include <bits/stdc++.h>
using namespace std;
// creating dynamic custom heap
template <typename T>
class PriorityQ
{
    // array for storing elements
    private:
    vector<T>array_elements; 
    
    // custom comparator function to sort on weight
    int comp(T a , T b)
    {
        return a.w - b.w;
    }
    
    public:
    // parentindex method
    int get_parent_ind(int index)
    {
        return (index - 1)/2;
    }
    
    // function to push the elements in heap.
    void push(T ele)
    {
        // adding to last then check for weather child has large value or small value.
        array_elements.push_back(ele);
        int childindex = array_elements.size() - 1;
        int parentindex = get_parent_ind(childindex);
        
        // if child value is larger than parent swap them.
        while((childindex != 0) && comp(array_elements[parentindex] , array_elements[childindex]) >= 1)
        {
            swap(array_elements[childindex] , array_elements[parentindex]);
            childindex = parentindex;
            parentindex = get_parent_ind(childindex);
        }
    }
    
    // swap first and last elements of array_elements and check for perfect position by leftchild and rightchild.
    void pop()
    {
        swap(array_elements[0] , array_elements[array_elements.size() - 1]);
        //remove last elements
        array_elements.pop_back();
        
        int parentindex = 0;
        int minindex = 0;
        
        while(true)
        {
            int leftchild = (2*parentindex + 1);
            int rightchild = (2*parentindex + 2);
            
            // comp them on weight assigned.
            if((leftchild < array_elements.size()) && comp(array_elements[leftchild] , array_elements[minindex]) <= 0)
            {
                minindex = leftchild;
            }
            if((rightchild < array_elements.size()) && comp(array_elements[rightchild] , array_elements[minindex]) <= 0)
            {
                minindex = rightchild;
            }
            
            if(minindex == parentindex)
            break;
            
            swap(array_elements[minindex] , array_elements[parentindex]);
            parentindex = minindex;
        }
        
    }
    
    // function to return minelement.
    T top()
    {
        return array_elements[0];
    }
    
    // function to return size of heap.
    int getSize()
    {
        return array_elements.size();
    }
    
};

// Node class for store source, destination and weight.
class Node{
    public :
    int u; // source
    int v; // destination
    int w; // weight
    
    Node(int u,int v,int w)
    {
        this->u=u;
        this->v=v;
        this->w=w;
    }
};

// finding parent of node (T.C = 4Î±)
int findParent(int parent[],int node)
{
    if(node==parent[node])
    return node;
    
    // Path compression
    return parent[node]=findParent(parent,parent[node]);
}

// unionFind using dsu.
void unionFind(int u,int v,int parent[],int rank[])
{
    int parent_u=findParent(parent,u);
    int parent_v=findParent(parent,v);
    
    if(rank[parent_v] > rank[parent_u])
    {
        parent[parent_u]=parent_v;
    }
    else if(rank[parent_v] < rank[parent_u])
    {
        parent[parent_v]=parent_u;
    }
    else
    {
        parent[parent_u]=parent_v;
        rank[parent_u]++;
    }
}
// custom comparator.
static bool cmp(Node n1,Node n2)
{
    return n1.w < n2.w;
}
int main() {
	int n;
	cin>>n;
	int parent[n]; // parent array
	int rank[n]; // rank array for dsu
	for(int i=0;i<n;i++)
	{
	    parent[i]=i;
	    rank[i]=0;
	}
	
	int m;
	cin>>m;
	int ans=0;
	PriorityQ<Node>temp;
	for(int i=0;i<m;i++)
	{
	    int u,v,w;
	    cin>>u>>v>>w;
	    Node obj(u,v,w);
	    temp.push(obj);
	}
	cout<<"MST PATHS :- \n";
	for(int i=0;i<m;i++)
	{
	    Node p=temp.top();
	    temp.pop();
	    int u=p.u;
	    int v=p.v;
	    
	    int parent_u=findParent(parent,u);
	    int parent_v=findParent(parent,v);
	    if(parent_v!=parent_u)
	    {
	        ans+=p.w;
	        cout<<p.u<<" "<<p.v<<"\n";
	        unionFind(parent_u,parent_v,parent,rank);
	    }
	}
	cout<<"MST Total Weight :- ";
	cout<<ans;
	return 0;
}


Input :- 
4 5
0 1 6
0 2 3
1 3 9
0 3 1
2 3 6

Output :- 
MST PATHS :- 
0 3
0 2
0 1
MST Total Weight :- 10
